// Generated by Apple Swift version 4.1 effective-3.3 (swiftlang-902.0.48 clang-902.0.37.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DynamicColor",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif




@interface UIColor (SWIFT_EXTENSION(DynamicColor))
/// Initializes and returns a color object using CIE XYZ color space component values with an observer at 2° and a D65 illuminant.
/// Notes that values out of range are clipped.
/// \param X The mix of cone response curves, specified as a value from 0 to 95.05.
///
/// \param Y The luminance, specified as a value from 0 to 100.0.
///
/// \param Z The quasi-equal to blue stimulation, specified as a value from 0 to 108.9.
///
/// \param alpha The opacity value of the color object, specified as a value from 0.0 to 1.0. Default to 1.0.
///
- (nonnull instancetype)initWithX:(CGFloat)X Y:(CGFloat)Y Z:(CGFloat)Z alpha:(CGFloat)alpha;
@end


@interface UIColor (SWIFT_EXTENSION(DynamicColor))
/// Initializes and returns a color object using the specified opacity and HSL component values.
/// \param hue The hue component of the color object, specified as a value from 0.0 to 360.0 degree.
///
/// \param saturation The saturation component of the color object, specified as a value from 0.0 to 1.0.
///
/// \param lightness The lightness component of the color object, specified as a value from 0.0 to 1.0.
///
/// \param alpha The opacity value of the color object, specified as a value from 0.0 to 1.0. Default to 1.0.
///
- (nonnull instancetype)initWithHue:(CGFloat)hue saturation:(CGFloat)saturation lightness:(CGFloat)lightness alpha:(CGFloat)alpha;
@end


@interface UIColor (SWIFT_EXTENSION(DynamicColor))
/// Initializes and returns a color object using CIE XYZ color space component values with an observer at 2° and a D65 illuminant.
/// Notes that values out of range are clipped.
/// \param L The lightness, specified as a value from 0 to 100.0.
///
/// \param a The red-green axis, specified as a value from -128.0 to 127.0.
///
/// \param b The yellow-blue axis, specified as a value from -128.0 to 127.0.
///
/// \param alpha The opacity value of the color object, specified as a value from 0.0 to 1.0. Default to 1.0.
///
- (nonnull instancetype)initWithL:(CGFloat)L a:(CGFloat)a b:(CGFloat)b alpha:(CGFloat)alpha;
@end


@interface UIColor (SWIFT_EXTENSION(DynamicColor))
/// Creates and returns a color object corresponding to the mix of the receiver and an amount of white color, which increases lightness.
/// \param amount Float between 0.0 and 1.0. The default amount is equal to 0.2.
///
///
/// returns:
/// A lighter DynamicColor.
- (UIColor * _Nonnull)tintedWithAmount:(CGFloat)amount SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a color object corresponding to the mix of the receiver and an amount of black color, which reduces lightness.
/// \param amount Float between 0.0 and 1.0. The default amount is equal to 0.2.
///
///
/// returns:
/// A darker DynamicColor.
- (UIColor * _Nonnull)shadedWithAmount:(CGFloat)amount SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)mixedLabWithColor:(UIColor * _Nonnull)color weight:(CGFloat)weight SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)mixedHSLWithColor:(UIColor * _Nonnull)color weight:(CGFloat)weight SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)mixedHSBWithColor:(UIColor * _Nonnull)color weight:(CGFloat)weight SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)mixedRGBWithColor:(UIColor * _Nonnull)color weight:(CGFloat)weight SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)mixedHueWithSource:(CGFloat)source target:(CGFloat)target SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIColor (SWIFT_EXTENSION(DynamicColor))
/// Creates and returns a color object with the hue rotated along the color wheel by the given amount.
/// \param amount A float representing the number of degrees as ratio (usually between -360.0 degree and 360.0 degree).
///
///
/// returns:
/// A DynamicColor object with the hue changed.
- (UIColor * _Nonnull)adjustedHueWithAmount:(CGFloat)amount SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns the complement of the color object.
/// This is identical to adjustedHue(180).
/// seealso:
/// adjustedHueColor:
///
/// returns:
/// The complement DynamicColor.
- (UIColor * _Nonnull)complemented SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a color object with the lightness increased by the given amount.
/// \param amount CGFloat between 0.0 and 1.0. Default value is 0.2.
///
///
/// returns:
/// A lighter DynamicColor.
- (UIColor * _Nonnull)lighterWithAmount:(CGFloat)amount SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a color object with the lightness decreased by the given amount.
/// \param amount Float between 0.0 and 1.0. Default value is 0.2.
///
///
/// returns:
/// A darker DynamicColor.
- (UIColor * _Nonnull)darkenedWithAmount:(CGFloat)amount SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a color object with the saturation increased by the given amount.
/// \param amount CGFloat between 0.0 and 1.0. Default value is 0.2.
///
///
/// returns:
/// A DynamicColor more saturated.
- (UIColor * _Nonnull)saturatedWithAmount:(CGFloat)amount SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a color object with the saturation decreased by the given amount.
/// \param amount CGFloat between 0.0 and 1.0. Default value is 0.2.
///
///
/// returns:
/// A DynamicColor less saturated.
- (UIColor * _Nonnull)desaturatedWithAmount:(CGFloat)amount SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a color object converted to grayscale.
/// This is identical to desaturateColor(1).
/// seealso:
/// desaturateColor:
///
/// returns:
/// A grayscale DynamicColor.
- (UIColor * _Nonnull)grayscaled SWIFT_WARN_UNUSED_RESULT;
/// Creates and return a color object where the red, green, and blue values are inverted, while the alpha channel is left alone.
///
/// returns:
/// An inverse (negative) of the original color.
- (UIColor * _Nonnull)inverted SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIColor (SWIFT_EXTENSION(DynamicColor))
/// The hue component as CGFloat between 0.0 to 1.0.
@property (nonatomic, readonly) CGFloat hueComponent;
/// The saturation component as CGFloat between 0.0 to 1.0.
@property (nonatomic, readonly) CGFloat saturationComponent;
/// The brightness component as CGFloat between 0.0 to 1.0.
@property (nonatomic, readonly) CGFloat brightnessComponent;
@end


@interface UIColor (SWIFT_EXTENSION(DynamicColor))
/// Creates a color from an hex string (e.g. “#3498db”). The RGBA string are also supported (e.g. “#3498dbff”).
/// If the given hex string is invalid the initialiser will create a black color.
/// \param hexString A hexa-decimal color string representation.
///
- (nonnull instancetype)initWithHexString:(NSString * _Nonnull)hexString;
/// Creates a color from an hex integer (e.g. 0x3498db).
/// \param hex A hexa-decimal UInt32 that represents a color.
///
/// \param alphaChannel If true the given hex-decimal UInt32 includes the alpha channel (e.g. 0xFF0000FF).
///
- (nonnull instancetype)initWithHex:(uint32_t)hex useAlpha:(BOOL)alphaChannel;
/// Returns the color representation as hexadecimal string.
///
/// returns:
/// A string similar to this pattern “#f4003b”.
- (NSString * _Nonnull)toHexString SWIFT_WARN_UNUSED_RESULT;
/// Returns the color representation as an integer.
///
/// returns:
/// A UInt32 that represents the hexa-decimal color.
- (uint32_t)toHex SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean value that indicates whether the receiver is equal to the given hexa-decimal string.
/// \param hexString A hexa-decimal color number representation to be compared to the receiver.
///
///
/// returns:
/// true if the receiver and the string are equals, otherwise false.
- (BOOL)isEqualToHexString:(NSString * _Nonnull)hexString SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean value that indicates whether the receiver is equal to the given hexa-decimal integer.
/// \param hex A UInt32 that represents the hexa-decimal color.
///
///
/// returns:
/// true if the receiver and the integer are equals, otherwise false.
- (BOOL)isEqualToHex:(uint32_t)hex SWIFT_WARN_UNUSED_RESULT;
/// Determines if the color object is dark or light.
/// It is useful when you need to know whether you should display the text in black or white.
///
/// returns:
/// A boolean value to know whether the color is light. If true the color is light, dark otherwise.
- (BOOL)isLight SWIFT_WARN_UNUSED_RESULT;
/// A float value representing the luminance of the current color. May vary from 0 to 1.0.
/// We use the formula described by W3C in WCAG 2.0. You can read more here: https://www.w3.org/TR/WCAG20/#relativeluminancedef.
@property (nonatomic, readonly) CGFloat luminance;
/// Returns a float value representing the contrast ratio between 2 colors.
/// We use the formula described by W3C in WCAG 2.0. You can read more here: https://www.w3.org/TR/WCAG20-TECHS/G18.html
/// NB: the contrast ratio is a relative value. So the contrast between Color1 and Color2 is exactly the same between Color2 and Color1.
///
/// returns:
/// A CGFloat representing contrast value.
- (CGFloat)contrastRatioWith:(UIColor * _Nonnull)otherColor SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIColor (SWIFT_EXTENSION(DynamicColor))
/// Initializes and returns a color object using the specified opacity and RGB component values.
/// Notes that values out of range are clipped.
/// \param r The red component of the color object, specified as a value from 0.0 to 255.0.
///
/// \param g The green component of the color object, specified as a value from 0.0 to 255.0.
///
/// \param b The blue component of the color object, specified as a value from 0.0 to 255.0.
///
/// \param a The opacity value of the color object, specified as a value from 0.0 to 255.0. The default value is 255.
///
- (nonnull instancetype)initWithR:(CGFloat)r g:(CGFloat)g b:(CGFloat)b a:(CGFloat)a;
/// The red component as CGFloat between 0.0 to 1.0.
@property (nonatomic, readonly) CGFloat redComponent;
/// The green component as CGFloat between 0.0 to 1.0.
@property (nonatomic, readonly) CGFloat greenComponent;
/// The blue component as CGFloat between 0.0 to 1.0.
@property (nonatomic, readonly) CGFloat blueComponent;
/// The alpha component as CGFloat between 0.0 to 1.0.
@property (nonatomic, readonly) CGFloat alphaComponent;
/// Creates and returns a color object with the alpha increased by the given amount.
/// \param amount CGFloat between 0.0 and 1.0.
///
///
/// returns:
/// A color object with its alpha channel modified.
- (UIColor * _Nonnull)adjustedAlphaWithAmount:(CGFloat)amount SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
